generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CONSULT
  BUSINESS
  ADMIN
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  image           String?
  role            Role             @default(CONSULT)
  password        String?
  accounts        Account[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cv              CV?              // En användare kan ha ett CV
  skills          UserSkill[]      // Färdigheter som användaren har
  jobApplications JobApplication[] // Relation to JobApplication
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model CV {
  id        Int      @id @default(autoincrement())
  url       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id           String   @id @default(uuid())
  title        String
  description  String
  startDate    DateTime
  category     String
  endDate      DateTime
  salary       String?
  requirements String
  userId       String   // Foreign key to User model

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id      Int    @id @default(autoincrement())
  userId  String
  skillId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
